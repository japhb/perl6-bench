#!/usr/bin/env perl6

# ABSTRACT: Master console/"porcelain" for Perl language family benchmarking tools

use v6;
use JSON::Tiny;
use Shell::Command;


# Reduce directory insanity a bit by changing to bench root
# and eliminating hardcoding for generated subdir names
my $PROGRAM_DIR = ~($*PROGRAM_NAME ~~ /^(.*\/)/) || './';
chdir $PROGRAM_DIR;
$PROGRAM_DIR = cwd;
my $COMPONENTS_DIR = "$PROGRAM_DIR/components";
my $TIMINGS_DIR    = "$PROGRAM_DIR/timings";

# This ends up getting used all over the place;
# might as well just load it at startup
my $COMPONENTS = from-json(slurp "$PROGRAM_DIR/components.json");


# MAIN COMMANDS

#= Show benchmark configuration
multi MAIN ('config') {
    print qq:to/CONFIG/;
        Benchmark root:    $PROGRAM_DIR
        Perl 6 program:    $*EXECUTABLE_NAME
        Perl 6 version:    $*PERL<compiler>< name ver build-date >
        Known components:  $COMPONENTS.keys.sort.join(', ')
        CONFIG
}

#= Prepare for mass benchmarking
multi MAIN ('setup') {
    say 'Creating directories ...';
    mkdir $COMPONENTS_DIR unless $COMPONENTS_DIR.path.d;

    say 'Cloning component repos ...';
    for $COMPONENTS.values -> $component {
        my $name = $component<name>;
        say "==> $name";

        chdir $COMPONENTS_DIR;
        mkdir $name unless $name.path.d;
        chdir $name;

        my $repo = $component<repo_url>;
        my $bare = "$name.git";
        say "----> Already cloned." if $bare.path.d && $name.path.d;
        run < git fetch >           if $bare.path.d && $name.path.d;
        run < git clone --mirror >, $repo, $bare unless $bare.path.d;
        run < git clone -l       >, $bare, $name unless $name.path.d;
    }

    say 'Setup complete.';
}

#= Fetch latest commits in each cloned component
multi MAIN ('fetch', *@components) {
    needs-setup('fetch');

    for-components @components, -> $comp, $name {
        my $comp_dir = "$COMPONENTS_DIR/$name";
        my $bare     = "$name.git";

        unless "$comp_dir/$bare".path.d {
            say "No bare repository exists for component $name; can't fetch updates.";
            next;
        }

        # Work around Rakudo bug #115390 by splitting into multiple loops
        # (And this time, it doesn't even seem to completely go away!)

        # Fetch commits in bare mirror first, then requested checkouts
        say '~~~> FETCHING';
        for $bare, $comp<checkouts>.list -> $dir {
            my $path = "$comp_dir/$dir";
            next unless $path.path.d;

            say "----> $dir";
            chdir $path;
            run < git fetch -t >;
            run < git fetch -u >;
        };

        # Find all tags known in this component
        %*ENV<GIT_DIR> = "$comp_dir/$bare";
        my $tag-list = open 'git tag', :p;
        my @all-tags = $tag-list.lines;
        $tag-list.close;
        %*ENV.delete('GIT_DIR');

        # Pull into non-tag checkouts
        say '~~~> PULLING';
        for $comp<checkouts>.list -> $dir {
            my $path = "$comp_dir/$dir";
            next unless "$path/.git".path.d;
            next if $dir eq any(@all-tags);

            say "----> $dir";
            chdir $path;
            run < git pull >;
        }
    }
}

#= Alias for 'extract'
multi MAIN ('extract-releases', *@components) { MAIN('extract', |@components) }

#= Extract historical releases from cloned components
multi MAIN ('extract', *@components) {
    needs-setup('extract releases');

    for-components @components, -> $comp, $name {
        chdir "$COMPONENTS_DIR/$name";

        my $bare = "$name.git";
        unless $bare.path.d {
            say "No bare repository exists for component $name; can't extract releases.";
            next;
        }

        # Find all tags known in this component
        %*ENV<GIT_DIR> = $bare;
        my $tag-list = open 'git tag', :p;
        my @all-tags = $tag-list.lines;
        $tag-list.close;

        my @revs;
        if $comp<checkouts> {
            # User specified list of revs to extract
            for $comp<checkouts>.list {
                when any(@all-tags) { push @revs, $_ }
                when so run(< git rev-parse -q --verify --no-revs >, $_) { push @revs, $_ }
                default  { $*ERR.say: "No such rev '$_'" }
            }
        }
        else {
            # Check out filtered tag list by default
            my $tag_regex = $comp<info><release_tags>;
            next unless $tag_regex;

            @revs = grep / <{ $tag_regex }> /, @all-tags;
        }

        %*ENV.delete('GIT_DIR');

        # Work around Rakudo bug #115390 by splitting into multiple loops
        for @revs -> $rev {
            if $rev.path.d {
                say "$rev already cloned.";
                next;
            }
            run < git clone -l >, $bare, $rev;
        }
        for @revs -> $rev {
            unless $rev.path.d {
                $*ERR.say: "Unable to extract release '$rev'.";
                next;
            }
            chdir $rev; LEAVE chdir '..';
            run < git checkout -q >, $rev;   # > -- Dang syntax highlighting
        }
        for @revs -> $rev {
            next unless $rev.path.d;
            next if $rev eq any(@all-tags);

            chdir $rev; LEAVE chdir '..';
            run < git pull >;
        }
    }
}

#= List known components with clone status
multi MAIN ('list-components') {
    my @names = $COMPONENTS.keys.sort;
    my $max-length = max('COMPONENT'.chars, @names>>.chars);
    my $format = "%-{$max-length}s    %s\n";
    printf $format, < COMPONENT STATUS >;
    printf $format, < --------- ------ >;

    my $missing;
    for @names -> $name {
        my $bare-dir = "$COMPONENTS_DIR/$name/$name.git";
        my $desc     = $bare-dir.IO.d ?? 'cloned' !! do { $missing++; '[NOT FOUND]' };
        printf $format, $name, $desc;
    }

    say "\nPlease run `$*PROGRAM_NAME setup` to clone missing components." if $missing;
}

#= List checked out component trees with matching git revision
multi MAIN ('list-checkouts', *@components) {
    needs-setup('list');

    my @lengths = for-checkouts @components, -> $, $name, $checkout { "$name/$checkout".chars }, :quiet;
    my $max-length = max('CHECKOUT'.chars, @lengths);
    my $format = "%-{$max-length}s    %s\n";
    printf $format, < CHECKOUT REVISION >;
    printf $format, < -------- -------- >;

    for-checkouts @components, -> $comp, $name, $checkout {
        my $subdir   = "$name/$checkout";
        my $comp-dir = "$COMPONENTS_DIR/$subdir";
        my $desc     = '[NOT FOUND]';
        if $comp-dir.IO.d {
            given "$comp-dir/.git" {
                when .IO.d { %*ENV<GIT_DIR> = $_;
                             $desc = qx/git describe --always/.chomp }
                default    { $desc = '[NOT A GIT CHECKOUT]' }
            }
        }
        printf $format, $subdir, $desc;
    }, :quiet;
}

#= Build checked out component trees
multi MAIN ('build', *@components) {
    needs-setup('build components');

    for-checkouts @components, -> $comp, $name, $checkout {
        chdir "$COMPONENTS_DIR/$name/$checkout";

        my $build_steps = $comp<info><build_steps>;
        for $build_steps.list -> $step {
            $step ~~ Positional ?? run(|$step) !! shell($step);
        }
    }
}

#= Run timing benchmarks on (variants of) built components
multi MAIN ('time', *@components, :$variants?, :$tests?, :$tests-tagged?,
                                  :$runs?, :$enough-time?, Bool :$verbose?) {
    needs-setup('benchmark Perls');

    my @options = as-options(:$tests, :$tests-tagged, :$runs, :$enough-time, :$verbose);

    for-checkouts @components, -> $comp, $name, $checkout {
        chdir "$COMPONENTS_DIR/$name/$checkout";

        my $timings_dir = "$TIMINGS_DIR/$name";
        mkpath $timings_dir;

        my @variants = $variants ?? $variants.split(',') !! $name;
        run "$PROGRAM_DIR/timeall", "--outfile=$timings_dir/$checkout.json",
                                    @options, @variants;
    }
}

#= Compare benchmark timings
multi MAIN ('compare', *@timings, :$format?, :$style?, :$outfile?,
            :$ignore-startup = True, :$ignore-compile = True) {
    needs-timings('compare');

    my @options = as-options(:compare, :$ignore-startup, :$ignore-compile, :$format, :$style, :$outfile);

    my @timings-files;
    for explode-timings(@timings, :!chdir).kv -> $component, @files {
        @timings-files.push: @files.map: "$TIMINGS_DIR/$component/" ~ *;
    }

    run "$PROGRAM_DIR/analyze", @options, @timings-files;
}

#= Clean up build trees in $COMPONENTS_DIR, keeping bare clones by default
multi MAIN ('clean', *@components) {
    unless $COMPONENTS_DIR.path.d {
        say "No 'components' tree exists, so there is nothing to clean.";
        exit;
    }

    for-checkouts @components, -> $comp, $name, $checkout {
        rm_rf "$COMPONENTS_DIR/$name/$checkout";
    }
}

#= Remove *everything* not part of the core benchmark tree
multi MAIN ('realclean', Bool :$force) {
    unless $force {
        print q:to/NEED_FORCE/;  # : -- Dang syntax highlighting
            Are you sure?

            This command will wipe your benchmarking tree clean, destroying any builds,
            cloned components, and benchmark results in the process.  You will need
            to use the --force option if you really want to do this.
            NEED_FORCE
        exit;
    }

    # OK, you asked for it!
    say "OK, performing realclean.";
    rmtree $_ for $COMPONENTS_DIR, $TIMINGS_DIR;
    run < git clean -dxf >;
}

#= Perform benchmark timings (low-level command)
multi MAIN ('timeall', *@options) {
    run('./timeall', |@options);
}

#= Analyze results from benchmark timings (low-level command)
multi MAIN ('analyze', *@options_and_files) {
    run('./analyze', |@options_and_files);
}


# UTILITY ROUTINES

#= Check whether components dir exists and bail out if not (recommending 'setup' command)
sub needs-setup ($action) {
    unless $COMPONENTS_DIR.path.d {
        print qq:to/COMPONENTS/;
            There is no '{ $COMPONENTS_DIR.path.basename }' tree, and thus there are no repos to $action.
            Please run: `$*PROGRAM_NAME setup`.
            COMPONENTS
        exit 1;
    }
}

#= Check whether timings dir exists and bail out if not (recommending steps to produce timings)
sub needs-timings ($action) {
    unless $TIMINGS_DIR.path.d {
        print qq:to/TIMINGS/;
            There is no '{ $TIMINGS_DIR.path.basename }' tree, and thus there are no timings to $action.
            Please run:
            `$*PROGRAM_NAME setup`   to prepare and clone components,
            `$*PROGRAM_NAME extract` to extract Perls to be benchmarked,
            `$*PROGRAM_NAME build`   to build the Perls and their components, and
            `$*PROGRAM_NAME time`    to benchmark the built Perls and generate timings.
            TIMINGS
        exit 1;
    }
}

#= Convert pairs to command line option strings
sub as-options (*%args) {
    my @options;
    for %args.kv -> $k, $v {
        given $v {
            when !.defined {}
            when Bool      { @options.push: $v ?? "--$k" !! "--no$k" }
            default        { @options.push: "--$k=$v"                }
        }
    }

    return @options;
}

#= Simulate the behavior of `git clean -dxf`
sub rmtree ($dir, :$noisy = True) {
    return unless $dir.path.d;
    say "Removing $dir" if $noisy;
    rm_rf $dir;
}

#= Run code for every requested component
sub for-components (@components, &code, :$quiet) {
    for explode-components(@components) -> $comp {
        my $name = $comp<info><name>;
        say "==> $name" unless $quiet;

        code($comp, $name);
    }
}

#= Run code for every checkout in every requested component
sub for-checkouts (@components, &code, :$quiet) {
    for-components @components, -> $comp, $name {
        for $comp<checkouts>.list -> $checkout {
            say "----> $checkout" unless $quiet;

            code($comp, $name, $checkout);
        }
    }, :$quiet;
}

#= Expand a partially-specified list of components and checkouts
sub explode-components (@component-specs, :$chdir = True, :$default-to-dirs = True) {
    chdir $COMPONENTS_DIR if $chdir;
    @component-specs ||= dir($COMPONENTS_DIR).sort if $default-to-dirs;

    my @exploded;
    for @component-specs -> $spec is copy {
        # Remove optional leading "$COMPONENTS_DIR/", which helps with tab completion
        $spec .= subst(/^ $COMPONENTS_DIR '/' /, '');  # ' -- Dang syntax highlighting
        die "Don't know what to do with empty component specification" unless $spec.chars;

        my ($component, $checkouts) = $spec.split: '/';
        my $comp-info = $COMPONENTS{$component};
        die "Don't know how to process component '$component'" unless $comp-info;

        my @checkouts;
        if $checkouts.defined && $checkouts.chars {
            @checkouts = $checkouts.split: ',';
        }
        else {
            my $bare   = "$component.git";
            @checkouts = dir("$COMPONENTS_DIR/$component",
                            test => none('.', '..', $bare)).map(*.basename.Str).sort;
        }

        if @exploded.first(*.<info><name> eq $component) -> $comp {
            $comp<checkouts>.push: |@checkouts;
        }
        else {
            @exploded.push: { info => $comp-info, checkouts => @checkouts };
        }
    }

    return @exploded;
}

#= Expand a partially-specified list of timings files
sub explode-timings (@timing-specs, :$chdir = True, :$default-to-dirs = True) {
    chdir $TIMINGS_DIR if $chdir;
    @timing-specs ||= dir($TIMINGS_DIR).sort if $default-to-dirs;

    my %exploded;
    for @timing-specs -> $spec is copy {
        # Remove optional leading "$TIMINGS_DIR/", which helps with tab completion
        $spec .= subst(/^ $TIMINGS_DIR '/' /, '');  # ' -- Dang syntax highlighting
        die "Don't know what to do with empty timing specification" unless $spec.chars;

        my ($component, $files) = $spec.split: '/';

        my @files;
        if $files.defined && $files.chars {
            @files = $files.split(',').map: { /'.json' $/ ?? $_ !! $_ ~ '.json' };
        }
        else {
            @files = dir("$TIMINGS_DIR/$component",
                         test => /'.json' $/).map(*.basename.Str).sort;
        }

        %exploded{$component}.push: |@files;
    }

    return %exploded;
}
